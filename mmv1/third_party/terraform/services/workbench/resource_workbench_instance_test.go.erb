package workbench_test

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
)

func TestAccWorkbenchInstance_create(t *testing.T) {
	t.Parallel()

	prefix := fmt.Sprintf("%d", acctest.RandInt(t))
	name := fmt.Sprintf("tf-%s", prefix)

	acctest.VcrTest(t, resource.TestCase{
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccWorkbench_create(name),
			},
			{
				ResourceName:            "google_workbench_instance.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"vm_image", "metadata"},
			},
		},
	})
}

func TestAccWorkbenchInstance_update(t *testing.T) {
	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccWorkbenchInstance_full(context),
			},
			{
				ResourceName:            "google_workbench_instance.instance",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"vm_image", "metadata"},
			},
			{
				Config: testAccWorkbenchInstance_update(context, true),
			},
			{
				ResourceName:            "google_workbench_instance.instance",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"vm_image", "metadata"},
			},
			{
				Config: testAccWorkbenchInstance_update(context, false),
			},
			{
				ResourceName:            "google_workbench_instance.instance",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"vm_image", "metadata"},
			},
		},
	})
}

func testAccWorkbench_create(name string) string {
	return fmt.Sprintf(`

resource "google_workbench_instance" "test" {
  name = "%s"
  location = "us-west1-a"

  gce_setup {
    machine_type = "n1-standard-4"

    vm_image {
      project      = "deeplearning-platform-release"
      family       = "tf-latest-cpu"
    }

    network_interfaces = [{
      nic_type = "GVNIC"
    }]

    metadata = {
      terraform = "true"
    }
  }
}
`, name)
}

func testAccWorkbenchInstance_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_workbench_instance" "instance" {
  name = "tf-test-workbench-instance%{random_suffix}"
  location = "us-west1-a"

  lifecycle {
  	prevent_destroy = true
  }
}
`, context)
}

func testAccWorkbenchInstance_update(context map[string]interface{}, preventDestroy bool) string {
	context["prevent_destroy"] = strconv.FormatBool(preventDestroy)

	return acctest.Nprintf(`
resource "google_workbench_instance" "instance" {
  name = "tf-test-workbench-instance%{random_suffix}"
  location = "us-west1-a"

  gce_setup {

    metadata = {
      terraform = "true"
    }
  }

  labels = {
    key = "value"
  }

  lifecycle {
  	prevent_destroy = %{prevent_destroy}
  }
}
`, context)
}
